# --- START OF FILE automation.py ---

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException
import time
import random
import os
from urllib.parse import urlparse

# ================= C·∫§U H√åNH =================
KEYWORD_MAP = {
    "m88": {"name": "m88", "url": "bet88ec.com"},
    "w88": {"name": "w88", "url": "188.166.185.213"},
    "188bet": {"name": "188bet", "url": "88betag.com"},
    "bk8": {"name": "bk8", "url": "bk8ze.com"},
    "vn8": {"name": "vn8", "url": "vn88no.com"},
    "fb88": {"name": "fb88", "url": "fb88mg.com"},
    "v9bet": {"name": "v9bet", "url": "v9betde.com"}
}
JS_FILE = "speedup.js"
PROXY_FILE = "proxies.txt"
UNWANTED_LINKS = ["#", "javascript:", "logout", "signout", "tel:", "mailto:"]
BUTTON_XPATH = "//*[@id='layma_me_vuatraffic']" 

# ================= TI·ªÜN √çCH =================
def load_proxies(filename=PROXY_FILE):
    if not os.path.exists(filename):
        raise FileNotFoundError(f"File proxy '{filename}' kh√¥ng t·ªìn t·∫°i.")
    with open(filename, 'r') as f:
        proxies = [line.strip() for line in f if line.strip()]
    if not proxies:
        raise ValueError(f"File '{filename}' r·ªóng ho·∫∑c kh√¥ng ch·ª©a proxy h·ª£p l·ªá.")
    print(f"‚úÖ ƒê√£ t·∫£i {len(proxies)} proxy t·ª´ '{filename}'.")
    return proxies

def is_valid_link(href, domain):
    if not href: return False
    if any(unwanted in href.lower() for unwanted in UNWANTED_LINKS): return False
    parsed = urlparse(href)
    return ((not parsed.netloc or parsed.netloc == domain) and not href.startswith(('javascript:', 'mailto:', 'tel:')))

def get_internal_links(driver):
    try:
        domain = urlparse(driver.current_url).netloc
        all_links = driver.find_elements(By.XPATH, "//a[@href]")
        valid_links = [link for link in all_links if is_valid_link(link.get_attribute('href'), domain) and link.is_displayed() and link.is_enabled()]
        return valid_links
    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y link: {str(e)}"); return []

def execute_js_action(driver, step_name):
    print(f"üíâ ƒêang inject JS cho {step_name}...")
    try:
        if not os.path.exists(JS_FILE): raise Exception(f"File {JS_FILE} kh√¥ng t·ªìn t·∫°i")
        with open(JS_FILE, 'r') as f: driver.execute_script(f.read())
        print(f"‚úÖ ƒê√£ inject JS cho {step_name}. Ch·ªù 5 gi√¢y ƒë·ªÉ h√†nh ƒë·ªông ho√†n t·∫•t...")
        time.sleep(5)
        return True
    except Exception as e:
        print(f"‚ùå L·ªói khi inject JS cho {step_name}: {str(e)}"); return False


# ================= H√ÄM CH√çNH ƒê·ªÇ BOT G·ªåI =================
def run_automation_task(keyword):
    if keyword not in KEYWORD_MAP:
        return {"status": "error", "message": f"T·ª´ kh√≥a kh√¥ng h·ª£p l·ªá: {keyword}"}
    
    target = KEYWORD_MAP[keyword]
    try:
        proxies = load_proxies()
    except (FileNotFoundError, ValueError) as e:
        return {"status": "error", "message": str(e)}

    random.shuffle(proxies)
    
    # --- V√íNG L·∫∂P TH·ª¨-SAI-L√ÄM-L·∫†I ---
    for i, proxy_url in enumerate(proxies):
        print("\n" + "="*50)
        print(f"üîÑ V√≤ng l·∫∑p {i+1}/{len(proxies)}. Th·ª≠ th·ª±c hi·ªán t√°c v·ª• v·ªõi proxy: {proxy_url}")
        
        driver = None # ƒê·∫£m b·∫£o driver ƒë∆∞·ª£c reset cho m·ªói v√≤ng l·∫∑p
        try:
            # --- B∆∞·ªõc 1: Kh·ªüi t·∫°o tr√¨nh duy·ªát v·ªõi proxy hi·ªán t·∫°i ---
            options = webdriver.ChromeOptions()
            options.add_argument(f'--proxy-server={proxy_url}')
            options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36")
            options.add_argument("--disable-blink-features=AutomationControlled")
            options.add_experimental_option("excludeSwitches", ["enable-automation"])
            options.add_experimental_option('useAutomationExtension', False)

            bs_user = os.environ.get('BS_USER')
            bs_key = os.environ.get('BS_KEY')
            if not bs_user or not bs_key:
                # N·∫øu kh√¥ng c√≥ th√¥ng tin BS, b√°o l·ªói v√† d·ª´ng h·∫≥n
                return {"status": "error", "message": "Thi·∫øu bi·∫øn m√¥i tr∆∞·ªùng BS_USER ho·∫∑c BS_KEY."}

            remote_url = f"https://{bs_user}:{bs_key}@hub-cloud.browserstack.com/wd/hub"
            bstack_options = {"os": "Windows", "osVersion": "11", "browserName": "Chrome", "browserVersion": "latest", "sessionName": f"Task Attempt {i+1} - {keyword}"}
            options.set_capability('bstack:options', bstack_options)

            print("ƒêang k·∫øt n·ªëi ƒë·∫øn tr√¨nh duy·ªát t·ª´ xa...")
            driver = webdriver.Remote(command_executor=remote_url, options=options)
            driver.set_page_load_timeout(60) # TƒÉng timeout ƒë·ªÉ cho proxy y·∫øu c√≥ c∆° h·ªôi
            
            # --- B∆∞·ªõc 2: Th·ª≠ th·ª±c hi·ªán to√†n b·ªô t√°c v·ª• ---
            print("üåê Truy c·∫≠p Google ƒë·ªÉ t√¨m ki·∫øm m·ª•c ti√™u...")
            driver.get("https://www.google.com")
            
            search_box = WebDriverWait(driver, 20).until(EC.presence_of_element_located((By.NAME, 'q')))
            search_query = f"site:{target['url']}"
            search_box.send_keys(search_query)
            search_box.submit()
            print(f"...ƒê√£ t√¨m ki·∫øm '{search_query}'.")

            # N·∫øu b·ªã CAPTCHA, b∆∞·ªõc n√†y s·∫Ω timeout
            first_result = WebDriverWait(driver, 15).until(EC.presence_of_element_located((By.XPATH, "//div[@id='search']//a[h3]")))
            driver.execute_script("arguments[0].click();", first_result)
            print("‚úÖ ƒê√£ click v√†o k·∫øt qu·∫£ t√¨m ki·∫øm. Ch·ªù trang ƒë√≠ch t·∫£i...")
            time.sleep(7) 

            # C√°c b∆∞·ªõc c√≤n l·∫°i
            if not execute_js_action(driver, "l·∫ßn 1"): raise Exception("Th·∫•t b·∫°i ·ªü b∆∞·ªõc 1: Inject JS l·∫ßn 1")
            
            internal_links = get_internal_links(driver)
            if not internal_links: raise Exception("Kh√¥ng t√¨m th·∫•y link n·ªôi b·ªô h·ª£p l·ªá.")
            
            chosen_link = random.choice(internal_links)
            print(f"üëâ Ch·ªçn link: {chosen_link.get_attribute('href')}")
            driver.execute_script("arguments[0].click();", chosen_link)
            time.sleep(7)

            if not execute_js_action(driver, "l·∫ßn 2"): raise Exception("Th·∫•t b·∫°i ·ªü b∆∞·ªõc 2: Inject JS l·∫ßn 2")
            
            code_element = WebDriverWait(driver, 30).until(EC.presence_of_element_located((By.XPATH, BUTTON_XPATH)))
            code = code_element.text or code_element.get_attribute('value') or code_element.get_attribute('innerHTML')
            if not code or not code.strip(): raise Exception("L·∫•y ƒë∆∞·ª£c m√£ r·ªóng ho·∫∑c kh√¥ng h·ª£p l·ªá.")
            
            # --- TH√ÄNH C√îNG! ---
            print(f"‚ú® TH√ÄNH C√îNG V·ªöI PROXY: {proxy_url} | M√É: {code.strip()}")
            driver.quit() # ƒê√≥ng tr√¨nh duy·ªát sau khi th√†nh c√¥ng
            return {"status": "success", "data": code.strip()}

        except (TimeoutException, WebDriverException) as e:
            # B·∫Øt c√°c l·ªói ph·ªï bi·∫øn c·ªßa Selenium (timeout, kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c,...)
            # ƒê√¢y l√† d·∫•u hi·ªáu proxy h·ªèng ho·∫∑c b·ªã CAPTCHA
            print(f"‚ùå Proxy {proxy_url} th·∫•t b·∫°i. L·ªói: {str(e)[:150]}...")
            print("‚û°Ô∏è Th·ª≠ proxy ti·∫øp theo.")
            if driver:
                driver.quit() # R·∫•t quan tr·ªçng: ƒë√≥ng phi√™n l√†m vi·ªác l·ªói
            continue # Chuy·ªÉn sang proxy ti·∫øp theo trong v√≤ng l·∫∑p

    # N·∫øu v√≤ng l·∫∑p k·∫øt th√∫c m√† kh√¥ng c√≥ proxy n√†o th√†nh c√¥ng
    return {"status": "error", "message": "ƒê√£ th·ª≠ t·∫•t c·∫£ proxy nh∆∞ng kh√¥ng c√≥ proxy n√†o ho√†n th√†nh ƒë∆∞·ª£c t√°c v·ª•. Vui l√≤ng ki·ªÉm tra l·∫°i danh s√°ch proxy."}
